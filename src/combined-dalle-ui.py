# Importing the necessary Python libraries
import yaml
import openai
import gradio as gr
from io import BytesIO
from base64 import b64decode
from PIL import Image
import os
from pathlib import Path


## API INSTANTIATION
## ---------------------------------------------------------------------------------------------------------------------
# Loading the API key and organization ID from file (NOT pushed to GitHub)
# store API keys in yaml file like "sample.yml"
all_keys = yaml.safe_load(open(Path(os.getenv("API_KEYS_FILE"))))
api_key = all_keys["API_KEYS"]["OPENAI"]

# Applying our API key and organization ID to OpenAI
openai.organization = api_key['ORG_ID']
openai.api_key = api_key['API_KEY']



## GRADIO HELPER FUNCTIONS
## ---------------------------------------------------------------------------------------------------------------------
def generate_image(user_prompt):
    '''
    Generates an image using the DALL-E API per the user's prompt

    Inputs:
        - user_prompt (str): A body of text describing what the user would like to see

    Returns:
        - dalle_image (PIL): The image generated by DALL-E
    '''

    # Checking that the user prompt does not exceed 1000 character
    if len(user_prompt) > 1000:
        raise gr.Error('Input prompt cannot exceed 1000 characters.')
    
    # Using DALL-E to generate the image as a base64 encoded object
    openai_response = openai.Image.create(
        prompt = user_prompt,
        n = 1,
        size = '1024x1024',
        response_format = 'b64_json'
    )

    # Decoding the base64 encoded object into a PIL image
    dalle_image = Image.open(BytesIO(b64decode(openai_response['data'][0]['b64_json'])))

    return dalle_image



def generate_similar_images(upload_image):
    '''
    Generates similar images based on an input image

    Inputs:
        - upload_image (PIL): An image uploaded by the user that will be the basis to create similar images

    Returns:
        - output_gallery (list): A list of images that will be returned in a display gallery
    '''
    # Using DALL-E to generate similar images compared to the one uploaded by the user
    openai_response = openai.Image.create_variation(
        image = open(upload_image, 'rb'),
        n = 5,
        size = '1024x1024',
        response_format = 'b64_json'
    )

    # Creating an empty list to hold all the images for the output gallery
    output_gallery = []

    # Iterating through all the images returned by DALL-E
    for image in openai_response['data']:

        # Appending the DALL-E generated image to the gallery
        output_gallery.append(Image.open(BytesIO(b64decode(image['b64_json']))))

    return output_gallery



## GRADIO UI LAYOUT & FUNCTIONALITY
## ---------------------------------------------------------------------------------------------------------------------
# Defining the building blocks that represent the form and function of the Gradio UI
with gr.Blocks(title = 'DALL-E Combined UI', theme = 'base') as demo:

    # Setting the display into two columns
    with gr.Row():

        # Setting the display for the first column
        with gr.Column():

            # Adding a header for the left side of the UI
            image_generation_header = gr.Markdown('''
            # DALL-E Image Generation

            Please enter a prompt for what you would like DALL-E to generate and click the "Generate Image" button to watch DALL-E work its magic!
            '''
            )

            # Adding a textbox for the user to submit a prompt
            user_prompt = gr.Textbox(label = 'What would you like to see?', placeholder = 'Enter some text (up to 1000 characters) of what you would like DALL-E to generate for you.')

            # Adding a button for the user to click to generate the DALL-E image
            generate_image_button = gr.Button('Generate Image')

            # Adding a thing to display the DALL-E image
            dalle_image = gr.Image(label = 'DALL-E Generated Image', interactive = False)

        # Setting the display for the second column
        with gr.Column():

            # Adding a header for the right side of the UI
            similar_image_header = gr.Markdown('''
            # DALL-E Image Variation Generator

            Upload your own `.png` image (< 4MB) to have DALL-E generate a gallery of similar images.
            '''
            )

            # Adding the mechanism to upload a user image
            upload_image = gr.Image(label = 'Image Uploader', type = 'filepath')

            # Adding a button for the user to click to generate similar images to the one uploaded
            generate_similar_images_button = gr.Button('Generate Similar Images')

            # Adding an output gallery to display the similar images
            output_gallery = gr.Gallery(label = 'Similar Image Gallery')

    # Defining the behavior of what happens when the "Generate Image" button is clicked
    generate_image_button.click(fn = generate_image,
                                inputs = [user_prompt],
                                outputs = [dalle_image])
    
    # Defining the behavior of what happens when the "Generate Similar Images" button is clicked
    generate_similar_images_button.click(fn = generate_similar_images,
                                         inputs = [upload_image],
                                         outputs = [output_gallery])



## SCRIPT INVOCATION
## ---------------------------------------------------------------------------------------------------------------------
if __name__ == "__main__":

    # Launching the Gradio UI
    demo.launch()